// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum PreferredLanguage {
  en // English
  ar // Arabic
  ms // Malay/Indonesian
  tr // Turkish
  fr // French
  ur // Urdu (optional)
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  preferredLanguage  PreferredLanguage
  streakCount        Int                 @default(0)
  moodId             String?
  mood               Mood?               @relation(fields: [moodId], references: [id])
  subscriptionId     String?             @unique
  subscription       Subscription?       @relation(fields: [subscriptionId], references: [id])
  chats              Chat[]
  conversationTopics ConversationTopic[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@index([preferredLanguage])
  @@index([moodId])
  @@map("users")
}

model Subscription {
  id   String @id @default(uuid())
  user User?
  plan String

  @@index([plan])
  @@map("subscriptions")
}

model Mood {
  id                 String              @id @default(uuid())
  type               String
  users              User[]
  conversationTopics ConversationTopic[]

  @@unique([type])
  @@map("moods")
}

model Chat {
  id                 String              @id @default(uuid())
  role               ChatRole
  content            String
  mode               ChatMode
  preferredLanguage  PreferredLanguage
  conversationTopics ConversationTopic[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  User               User?               @relation(fields: [userId], references: [id])
  userId             String?

  @@index([preferredLanguage])
  @@index([mode])
  @@map("chats")
}

model ConversationTopic {
  id            String         @id @default(uuid())
  title         String
  saved         Boolean        @default(false)
  chatId        String
  chat          Chat           @relation(fields: [chatId], references: [id])
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  moodId        String?
  mood          Mood?          @relation(fields: [moodId], references: [id])
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([chatId])
  @@index([userId])
  @@index([moodId])
  @@index([saved])
  @@map("conversation_topics")
}

model Notification {
  id                  String            @id @default(uuid())
  conversationTopicId String
  conversationTopic   ConversationTopic @relation(fields: [conversationTopicId], references: [id])
  content             String
  createdAt           DateTime          @default(now())

  @@index([conversationTopicId])
  @@map("notifications")
}

enum ChatRole {
  user
  AI
}

enum ChatMode {
  public
  private
}
